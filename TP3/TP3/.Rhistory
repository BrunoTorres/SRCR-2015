library("neuralnet")
trainset <- read.csv("/Users/brunopereira/Documents/SourceTree/SRCR/TP3/DadosTP3.csv",header=TRUE,sep=";",dec=".")
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = c(10,15), threshold = 0.01)
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = c(5,10), threshold = 0.1)
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = c(10,15), threshold = 0.4)
plot(fadiganet)
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = c(10,15), threshold = 0.1)
plot(fadiganet)
temp_test <- subset(trainset, select = c("FatigueLevel","Performance.KDTMean","Performance.MAMean","Performance.MVMean","Performance.TBCMean","Performance.DDCMean","Performance.DMSMean","Performance.AEDMean","Performance.ADMSLMean","Performance.Task"))
fadiganet.results <- compute(fadiganet, temp_test)
results <- data.frame(actual = trainset$default10yr, prediction = fadiganet.results$net.result)
fadiganet.results <- compute(fadiganet, temp_test)
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = c(10,15), threshold = 0.1)
temp_test <- subset(trainset, select = c("FatigueLevel","Performance.KDTMean","Performance.MAMean","Performance.MVMean","Performance.TBCMean","Performance.DDCMean","Performance.DMSMean","Performance.AEDMean","Performance.ADMSLMean","Performance.Task"))
fadiganet.results <- compute(fadiganet, temp_test)
fadiganet.results <- compute(fadiganet, temp_test)
library("neuralnet")
library(hydroGOF);
dataset <- read.csv("/Users/brunopereira/Downloads/RNAemR/creditset.csv")
trainset <- dataset[1:800, ]
testset <- dataset[801:2000, ]
creditnet <- neuralnet(default10yr ~ LTI + age, trainset, hidden = c(4), lifesign = "minimal",
linear.output = FALSE, threshold = 0.01)
temp_test <- subset(testset, select = c("LTI", "age"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$default10yr, prediction = creditnet.results$net.result)
results
results$prediction <- round(results$prediction)
rmse(c(testset$default10yr),c(results$prediction))
#install the necessary packages
#install.packages("twitteR")
#install.packages("wordcloud")
#install.packages("tm")
# chamar bibliotecas auxiliares
library("twitteR")
library("wordcloud")
library("tm")
#aceder ? api do Twitter
consumer_key <- 'EXyv4HdIFSTBsfLs92sjkIRL9'
consumer_secret <- 'Z40Ykdkda9bffNKfahbzs1dvSklw0jtLYzcYwr75aIxdn16EUG'
access_token <- '2980203820-4sQsy6ZKAwvp8jWuqjrwBP0AstePKxsKrxdNdfy'
access_secret <- 'pTViTaWcp8DLp0D9iGdmkGK72LNDZKzizU4VUgJw6xPx9'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
trainset <- read.csv("/Users/brunopereira/Downloads/RNAemR/rnaBanco.csv",header=TRUE,sep=";",dec=".")
# treinar rede neuronal chamada "creditnet" com 5 nodos interm?dios
creditnet <- neuralnet(Avaliacao ~ Vencimento+Habitacao+Automovel+Cartao, trainset, hidden = c(5), threshold = 0.01)
# imprimir resultados
print(creditnet)
#desenhar rede neuronal
plot(creditnet)
#criar dataframe para caso de teste
test <-data.frame(Vencimento=0.4,Habitacao=0.2,Automovel=0.40,Cartao=0.1)
#adicionar nova linha oa dataframe de teste com um novo caso
test[2,] <-data.frame(Vencimento=0.7,Habitacao=0.4,Automovel=0.55,Cartao=0.1)
# testar novos casos na rede neuronal
creditnet.results <- compute(creditnet, test)
#imprimir o resultado final (uso da fun??o round como auxiliar para arredondar o resultado final)
print(round(creditnet.results$net.result))
dataset <- read.csv("/Users/brunopereira/Downloads/RNAemR/creditset.csv")
#mostrar a "cabe?a" do dataset
head(dataset)
#extrair 800 casos do dataset para um novo datasete que ser? usado para treinar a rede neuronal
trainset <- dataset[1:800, ]
## extrair as restantes entradas do dataset para um dataset que sera usado para testar a redeneuronal
testset <- dataset[801:2000, ]
## treinar a rede neuronal para usar a variavel LTI e age como input e degault10y como output
creditnet <- neuralnet(default10yr ~ LTI + age, trainset, hidden = c(4), lifesign = "minimal",
linear.output = FALSE, threshold = 0.01)
## hidden: 4    thresh: 0.1    rep: 1/1    steps:    7266   error: 0.79202  time: 9.32 secs
## desenhar rede neuronal
plot(creditnet, rep = "best")
## definir variaveis de input para teste
temp_test <- subset(testset, select = c("LTI", "age"))
#testar a rede com os novos casos
creditnet.results <- compute(creditnet, temp_test)
imprimir resultados
results <- data.frame(actual = testset$default10yr, prediction = creditnet.results$net.result)
results
#imprimir resultados arrendondados
results$prediction <- round(results$prediction)
library("neuralnet")
trainset <- read.csv("/Users/brunopereira/Documents/SourceTree/SRCR/TP3/DadosTP3.csv",header=TRUE,sep=";",dec=".")
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = c(10,15), threshold = 0.1)
plot(fadiganet)
test <-data.frame(Performance.KDTMean=0.685)
test <-data.frame(Performance.KDTMean=1)
fadiganet.results <- compute(fadiganet, test)
test <-data.frame(Performance.KDTMean=1,Performance.MAMean=1,Performance.MVMean=1,Performance.TBCMean=1,Performance.DDCMean=1,Performance.DMSMean=1,Performance.AEDMean=1,Performance.ADMSLMean=1,Performance.Task=1)
fadiganet.results <- compute(fadiganet, test)
print(round(fadiganet.results$net.result))
test <-data.frame(Performance.KDTMean=0.5,Performance.MAMean=1,Performance.MVMean=1,Performance.TBCMean=1,Performance.DDCMean=1,Performance.DMSMean=1,Performance.AEDMean=1,Performance.ADMSLMean=1,Performance.Task=1)
fadiganet.results <- compute(fadiganet, test)
print(round(fadiganet.results$net.result))
test <-data.frame(Performance.KDTMean=0.5,Performance.MAMean=1,Performance.MVMean=2,Performance.TBCMean=0.9,Performance.DDCMean=1,Performance.DMSMean=1,Performance.AEDMean=1,Performance.ADMSLMean=1,Performance.Task=1)
fadiganet.results <- compute(fadiganet, test)
print(round(fadiganet.results$net.result))
fadiganet <- neuralnet(FatigueLevel ~ Performance.KDTMean+Performance.MAMean+Performance.MVMean+Performance.TBCMean+Performance.DDCMean+Performance.DMSMean+Performance.AEDMean+Performance.ADMSLMean+Performance.Task, trainset, hidden = 10, threshold = 0.1)
plot(fadiganet)
